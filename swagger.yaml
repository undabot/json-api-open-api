openapi: 3.0.0
info:
  description: 'Example API documentation for JSON:API'
  version: 1.0.0
  title: 'Example API'
paths:
  /books:
    get:
      summary: 'List books'
      operationId: listBooksCollection
      description: 'List collection of books'
      parameters:
        -
          in: query
          name: 'filter[author]'
          required: false
          description: 'Author ID filter'
          schema:
            type: string
            description: 'Author ID filter'
        -
          in: query
          name: 'filter[title]'
          required: false
          description: 'Title filter'
          schema:
            type: string
            description: 'Title filter'
        -
          in: query
          name: 'filter[priceMin]'
          required: false
          description: 'Price filter range'
          schema:
            type: integer
            description: 'Price filter range'
        -
          in: query
          name: 'filter[priceMax]'
          required: false
          description: 'Price filter range'
          schema:
            type: integer
            description: 'Price filter range'
      responses:
        200:
          description: 'Successful response for getting the collection of resources'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BooksReadModel'
    post:
      summary: 'Create books'
      operationId: 'create Books'
      description: 'Create books resource'
      responses:
        201:
          description: 'Successful response after creating JSON:API resource'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BooksReadModel'
      requestBody:
        description: 'books create model'
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/BooksCreateModel'
  '/books/{id}':
    get:
      summary: 'Get books'
      operationId: 'get Books'
      description: 'Get single books resource'
      parameters:
        -
          in: path
          name: id
          required: true
          description: 'Requested resource ID'
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
        -
          in: query
          name: include
          required: false
          description: 'Relationships to be included. Available: author, tags'
          schema:
            type: string
            example: 'author, tags'
      responses:
        200:
          description: 'Successful response for getting the resource instance'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BooksReadModel'
components:
  schemas:
    AuthorsIdentifier:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: authors
          description: authors
          enum:
            - authors
    AuthorsReadModel:
      type: object
      required:
        - id
        - type
        - attributes
        - relationships
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: authors
          enum:
            - authors
        attributes:
          type: object
          nullable: false
          required:
            - name
          properties:
            name:
              title: name
              type: string
              nullable: false
              description: 'Author name'
        relationships:
          type: object
          nullable: false
          required:
            - bookIds
          properties:
            bookIds:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/BooksIdentifier'
    BooksIdentifier:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: books
          description: books
          enum:
            - books
    BooksReadModel:
      type: object
      required:
        - id
        - type
        - attributes
        - relationships
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: books
          enum:
            - books
        attributes:
          type: object
          nullable: false
          required:
            - title
            - summary
            - price
          properties:
            title:
              title: title
              type: string
              nullable: false
              description: 'Book title'
            summary:
              title: summary
              type: string
              nullable: true
              description: 'Book summary'
            price:
              title: price
              type: integer
              nullable: false
              description: 'Book price in Croatian lipa'
        relationships:
          type: object
          nullable: false
          required:
            - authorId
            - tags
          properties:
            author:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/AuthorsIdentifier'
            tags:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/TagsIdentifier'
    BooksCreateModel:
      type: object
      required:
        - type
        - attributes
        - relationships
      properties:
        type:
          type: string
          example: books
          enum:
            - books
        attributes:
          type: object
          nullable: false
          required:
            - title
            - summary
            - price
          properties:
            title:
              title: title
              type: string
              nullable: false
            summary:
              title: summary
              type: string
              nullable: false
            price:
              title: price
              type: integer
              nullable: false
        relationships:
          type: object
          nullable: false
          required:
            - author
            - tags
          properties:
            author:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/AuthorsIdentifier'
            tags:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/TagsIdentifier'
    BooksUpdateModel:
      type: object
      required:
        - type
        - id
        - relationships
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: books
          enum:
            - books
        attributes:
          type: object
          nullable: false
          required: {  }
          properties:
            title:
              title: title
              type: string
              nullable: false
            summary:
              title: summary
              type: string
              nullable: false
            price:
              title: price
              type: string
              nullable: false
        relationships:
          type: object
          nullable: false
          required:
            - author
            - tags
          properties:
            author:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/AuthorsIdentifier'
            tags:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/TagsIdentifier'
    TagsIdentifier:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: tags
          description: tags
          enum:
            - tags
    TagsReadModel:
      type: object
      required:
        - id
        - type
        - attributes
        - relationships
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          example: tags
          enum:
            - tags
        attributes:
          type: object
          nullable: false
          required:
            - name
          properties:
            name:
              title: name
              type: string
              nullable: false
              description: 'Tag name'
        relationships:
          type: object
          nullable: false
          required:
            - bookIds
          properties:
            books:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/BooksIdentifier'

